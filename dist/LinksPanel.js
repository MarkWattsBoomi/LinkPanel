!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(1))},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var o=n(2);n(3);var a=function(t){function e(e){var n=t.call(this,e)||this;n.componentId="",n.flowKey="",n.attributes={},n.selectedItem=null,n.text="",n.componentId=e.id,n.flowKey=e.flowKey;var r=manywho.model.getComponent(n.props.id,n.props.flowKey);if(r.attributes)for(var o in r.attributes)n.attributes[o]=r.attributes[o];return n}return r(e,t),e.prototype.componentDidMount=function(){this.forceUpdate()},e.prototype.componentDidUpdate=function(){},e.prototype.getAttribute=function(t){return this.attributes[t]?this.attributes[t]:null},e.prototype.render=function(){var t=manywho.model.getComponent(this.componentId,this.flowKey),e=(manywho.state.getComponent(this.componentId,this.flowKey),[]),n=t.objectData;if(n&&n.length>0)for(var r=0;r<n.length;r++){var a=n[r],l=manywho.utils.getObjectDataProperty(a.properties,"Display Order").contentValue,i=manywho.utils.getObjectDataProperty(a.properties,"Caption").contentValue,c=manywho.utils.getObjectDataProperty(a.properties,"Children").objectData,u=manywho.utils.getObjectDataProperty(a.properties,"Link").contentValue,p=null;p=u?o.createElement("div",null,o.createElement("a",{href:u,target:"_blank",className:"columnar-links-panel-column-link"},o.createElement("span",null,i))):o.createElement("div",null,o.createElement("span",null,i));var s=[];if(c&&c.length>0)for(var m=0;m<c.length;m++){var f=c[m],y=manywho.utils.getObjectDataProperty(f.properties,"Display Order").contentValue,d=manywho.utils.getObjectDataProperty(f.properties,"Caption").contentValue,h=manywho.utils.getObjectDataProperty(f.properties,"Link").contentValue;s[y]=o.createElement("div",{className:"columnar-links-panel-column-item"},o.createElement("a",{href:h,target:"_blank",className:"columnar-links-panel-column-item-link"},o.createElement("span",null,d)))}e[l]=o.createElement("div",{className:"columnar-links-panel-column"},p,s)}return o.createElement("div",{className:"columnar-links-panel"},e)},e}(o.Component);manywho.component.register("ColumnarLinksPanel",a),e.default=a},function(t,e){t.exports=React},function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,